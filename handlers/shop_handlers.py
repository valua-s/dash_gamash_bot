import math
import re
from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, Message
from all_keyboards.inline_keyboards import under_item_keyboard, \
    show_next_page, under_want_buy_keyboard, two_to_five_keyboard, \
    pay_order_keyboard, choose_logistic_keyboard, share_contact_keyboard, \
    logistic_keyboard
from google_sheets_records.record_to_google_sheets import TableDashaRecorder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from create_bot import logger
from db_handler.db_info import DB



class Item(StatesGroup):
    id_item = State()
    shop_dict = State()
    page = State()
    pages = State()
    cart = State()
    cart_for_dasha = State()
    fio = State()
    adress = State()
    phone = State()
    logistic = State()


shop_router = Router()

COUNT_OF_ITEMS_PER_PAGE = 5


@shop_router.callback_query(F.data.contains('shop_assortiment'))
async def shop_assortiment(call: CallbackQuery, state: FSMContext, bot: Bot):
    
    page = int(call.data.split(': ')[1])
    if page == 1:
        await call.message.answer('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç, —É—Ç–æ—á–Ω—é —É –î–∞—à–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç :)')
        assortiment = await DB().get_queryset_of_count()
        await state.update_data(shop_dict=assortiment)
        await state.update_data(pages=math.ceil(len(assortiment)/COUNT_OF_ITEMS_PER_PAGE))
    else:
        await call.message.delete()
    await send_assortiment_page(call, state, page)


async def send_assortiment_page(call: CallbackQuery, state: FSMContext, page=1) -> None:
    
    data = await state.get_data()
    assortiment_dict = data.get('shop_dict')
    end_of_range = min(page * COUNT_OF_ITEMS_PER_PAGE, len(assortiment_dict))
    
    for index in range((page-1) * COUNT_OF_ITEMS_PER_PAGE, end_of_range): # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏–∑ COUNT_OF_ITEMS_PER_PAGE —Ç–æ–≤–∞—Ä–æ–≤
        id_item = assortiment_dict[index]['id']
        name = assortiment_dict[index]['name']
        cost = assortiment_dict[index]['amount']
        description = assortiment_dict[index]['description']
        await call.message.answer_photo(
            photo=assortiment_dict[index]['photo_link'],
            caption=(
                f'üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {name}\n'
                ' \n'
                f'üí∞ –¶–µ–Ω–∞: {cost} —Ä—É–±–ª–µ–π\n'
                ' \n'
                f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}'
                  ),
            reply_markup=under_item_keyboard(id_item, call.message.message_id)
        )
        
    if page < int(data.get('pages')): # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        await call.message.answer(
            f'–ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ {COUNT_OF_ITEMS_PER_PAGE} —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ?',
            reply_markup=show_next_page(page)
        )


@shop_router.callback_query(F.data.contains('item_id:'))
async def want_buy(call: CallbackQuery, bot: Bot, state: FSMContext):
    _, item_id, message_id = call.data.split(': ')
    
    data = await state.get_data()
    assortiment_dict = data.get('shop_dict')
    for item in assortiment_dict:
        if item.get('id') == int(item_id):
            item_name = item.get('name')
            item_price = item.get('amount')
    
    data = await state.get_data()
    full_cart = data.get('cart')
    if not full_cart:
        full_cart = {}
    full_cart[item_id] = [item_name, item_price, 1]
    
    await state.update_data(cart=full_cart)
    
    await call.message.answer(
        text=(f'–¢–æ–≤–∞—Ä: {item_name} - —Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {item_price} —Ä—É–±–ª–µ–π\n'
              '\n–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n'
              '\n'
              '–í—ã –º–æ–∂–µ—Ç–µ:\n'
              '\n'
              ' - C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n'
              ' - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\n'
              ' - –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ\n'
        ),
        reply_markup=under_want_buy_keyboard(item_id)
    )
    await call.message.delete()


@shop_router.callback_query(F.data.contains('change_count:'))
async def change_count(call: CallbackQuery):
    _, item_id = call.data.split(': ')
    await call.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        reply_markup=two_to_five_keyboard(item_id)
    )


@shop_router.callback_query(F.data.contains('this_count:'))
async def this_count(call: CallbackQuery, state: FSMContext):
    _, num, item_id = call.data.split(': ')
    data = await state.get_data()
    full_cart = data.get('cart')
    item_list = full_cart.get(item_id)
    item_list.pop()
    item_list.append(num)
    full_cart[item_id] = item_list
    await state.update_data(cart=full_cart)
    await call.message.answer(
        text=(f'–¢–æ–≤–∞—Ä: {item_list[0]} - —Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {item_list[1]} —Ä—É–±–ª–µ–π - –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {item_list[2]}\n'
              '\n–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n'
              '\n'
              '–í—ã –º–æ–∂–µ—Ç–µ:\n'
              '\n'
              ' - C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n'
              ' - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\n'
              ' - –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ\n'
        ),
        reply_markup=under_want_buy_keyboard(item_id)
    )
    await call.message.delete()


@shop_router.callback_query(F.data.contains('other_count:'))
async def other_count(call: CallbackQuery, state: FSMContext):
    _, item_id = call.data.split(': ')
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
    await call.message.delete()
    await state.update_data(id_item=item_id)
    await state.set_state(Item.id_item)


@shop_router.message(F.text.regexp(r'^(\d+)$').as_('digits'), Item.id_item)
async def other_count_get(message: Message, state: FSMContext):
    num = int(re.sub(r'[^0-9]', '', message.text))
    data = await state.get_data()
    item_id = data.get('id_item')
    full_cart = data.get('cart')
    item_list = full_cart.get(item_id)
    item_list.pop()
    item_list.append(num)
    full_cart[item_id] = item_list
    await state.update_data(cart=full_cart)
    await state.update_data(item_id=None)
    await message.answer(
        text=(f'–¢–æ–≤–∞—Ä: {item_list[0]} - —Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {item_list[1]} —Ä—É–±–ª–µ–π - –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {item_list[2]}\n'
              '\n–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n'
              '\n'
              '–í—ã –º–æ–∂–µ—Ç–µ:\n'
              '\n'
              ' - C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n'
              ' - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\n'
              ' - –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ\n'
        ),
        reply_markup=under_want_buy_keyboard(item_id)
    )


@shop_router.callback_query(F.data.contains('show_cart'))
async def show_cart(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart: dict = data.get('cart')
    text = '–ö–æ—Ä–∑–∏–Ω–∞ üõí: \n\n'
    amount = 0
    for item_id, list_values_item in cart.items():
        text += (
            f'–¢–æ–≤–∞—Ä: {list_values_item[0]} - —Å—Ç–æ–∏–º–æ—Å—Ç—å: {list_values_item[1]} —Ä—É–±–ª–µ–π - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {list_values_item[2]}'
            '\n'
        )
        amount += int(list_values_item[1]) * int(list_values_item[2])
    text += (
        '\n'
        f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {amount}'
    )
    await call.message.answer(
        text=text,
        reply_markup=choose_logistic_keyboard()
    )
    await state.update_data(cart_for_dasha=text)


@shop_router.callback_query(F.data == 'choose_logistic')
async def choose_logistic(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.answer(
        text=(
            '–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
            '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–∏ –§–ò–û:'
        ),
    )
    await state.set_state(Item.fio)


@shop_router.message(F.text, Item.fio)
async def get_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(Item.adress)
    await message.answer(
        text='–§–ò–û –∑–∞–ø–∏—Å–∞–ª–∏!\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å –∏–ª–∏ –∏–Ω–¥–µ–∫—Å:'
    )


@shop_router.message(F.text, Item.adress)
async def get_adress(message: Message, state: FSMContext):
    await state.update_data(adress=message.text)
    await state.set_state(Item.phone)
    await message.answer(
        text=('–ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω!\n'
        '–û—Å—Ç–∞–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω, –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:'),
        reply_markup=share_contact_keyboard()
    )


@shop_router.message(Item.phone)
async def get_phone(message: Message, state: FSMContext):
    if not message.contact:
        await state.update_data(phone=message.text)
    else:
        await state.update_data(phone=message.contact.phone_number)
    await state.set_state(Item.logistic)
    await message.answer(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ñ–∏—Ä–º—É (–ö—Ä–æ–º–µ –°–î–ï–ö, —Å –Ω–∏–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º):',
        reply_markup=logistic_keyboard()
    )


@shop_router.message(Item.logistic)
async def get_logistic(message: Message, state: FSMContext):
    await state.update_data(logistic=message.text)
    await message.answer(
        text='–¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ?',
        reply_markup=pay_order_keyboard()
    )


@shop_router.callback_query(F.data == 'pay_order')
async def pay_order(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.answer(
        text=(
            '–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ –∑–∞–∫–∞–∑!\n'
            '–î–∞—à–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n'
            '–ê –ø–æ–∫–∞ –í—ã –º–æ–∂–µ—Ç–µ –æ–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –±–∞–Ω–∫–∞: \n'
            '–¢–∏–Ω—å–∫–æ—Ñ—Ñ - –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +79500638409 (–ø–æ–ª—É—á–∞—Ç–µ–ª—å –î–∞—Ä—å—è –ù–∏–∫–∏—Ç–∏—á–Ω–∞ –ì)\n'
            '–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∏–∂–µ üëá'
        ),
    )
    await bot.send_photo(
        call.message.chat.id,
        photo='https://i.yapx.ru/YZ9SK.jpg',
        caption='–≠—Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ :)'
        )
    data = await state.get_data()
    cart = data.get('cart_for_dasha')
    fio = data.get('fio')
    adress = data.get('adress')
    phone = data.get('phone')
    logistic = data.get('logistic')
    
    await bot.send_message(
        -4658422924,
        text=(
            f'–ö–ª–∏–µ–Ω—Ç @{call.from_user.username}\n'
            f'{cart}\n\n'
            f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n'
            f'–§–ò–û: {fio}\n–ê–¥—Ä–µ—Å: {adress}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n'
            f'–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏—Ä–º–∞: {logistic}\n'
        )
    )
    
    await state.clear()
